package com.example.demo.model;



import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.DynamicUpdate;

import java.util.List;

/**
 * Entity class representing a user in the system.
 * This class maps to the 'users' table in the database and contains all user-related information.
 * Uses JPA annotations for ORM mapping and Lombok for boilerplate code reduction.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users")
@DynamicUpdate
public class User {

    /**
     * Unique identifier for the user.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * User's unique username.
     * Used for authentication and identification.
     */
    @Column(unique = true, nullable = false)
    private String username;

    /**
     * User's encrypted password.
     * Never stored in plain text.
     */
    @Column(nullable = false)
    private String password;

    /**
     * User's first name.
     */
    @Column(nullable = false)
    private String firstName;

    /**
     * User's last name.
     */
    @Column(nullable = false)
    private String lastName;

    /**
     * User's email address.
     * Must be unique in the system.
     */
    @Column(unique = true, nullable = false)
    private String email;

    /**
     * List of roles assigned to the user.
     * Stored as an enumerated list.
     */
    @ElementCollection(fetch = FetchType.EAGER)
    @Enumerated(EnumType.STRING)
    private List<Role> roles;
}

